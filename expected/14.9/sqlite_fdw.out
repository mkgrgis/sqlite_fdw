--SET log_min_messages  TO DEBUG1;
--SET client_min_messages  TO DEBUG1;
--Testcase 129:
CREATE EXTENSION sqlite_fdw;
--Testcase 130:
CREATE SERVER sqlite_svr FOREIGN DATA WRAPPER sqlite_fdw
OPTIONS (database '/tmp/sqlite_fdw_test/common.db');
--Testcase 131:
CREATE FOREIGN TABLE department(department_id int OPTIONS (key 'true'), department_name text) SERVER sqlite_svr; 
--Testcase 132:
CREATE FOREIGN TABLE employee(emp_id int OPTIONS (key 'true'), emp_name text, emp_dept_id int) SERVER sqlite_svr;
--Testcase 133:
CREATE FOREIGN TABLE empdata(emp_id int OPTIONS (key 'true'), emp_dat bytea) SERVER sqlite_svr;
--Testcase 134:
CREATE FOREIGN TABLE numbers(a int OPTIONS (key 'true'), b varchar(255)) SERVER sqlite_svr;
--Testcase 135:
CREATE FOREIGN TABLE multiprimary(a int, b int OPTIONS (key 'true'), c int OPTIONS(key 'true')) SERVER sqlite_svr;
--Testcase 136:
CREATE FOREIGN TABLE noprimary(a int, b text) SERVER sqlite_svr;
--Testcase 137:
CREATE FOREIGN TABLE RO_RW_test(i int OPTIONS (key 'true'), a text, b float, c int) SERVER sqlite_svr;
--Testcase 1:
SELECT * FROM department LIMIT 10;
 department_id | department_name 
---------------+-----------------
(0 rows)

--Testcase 2:
SELECT * FROM employee LIMIT 10;
 emp_id | emp_name | emp_dept_id 
--------+----------+-------------
(0 rows)

--Testcase 3:
SELECT * FROM empdata LIMIT 10;
 emp_id | emp_dat 
--------+---------
(0 rows)

--Testcase 4:
INSERT INTO department VALUES(generate_series(1,100), 'dept - ' || generate_series(1,100));
--Testcase 5:
INSERT INTO employee VALUES(generate_series(1,100), 'emp - ' || generate_series(1,100), generate_series(1,100));
--Testcase 6:
INSERT INTO empdata  VALUES(1, decode ('01234567', 'hex'));
--Testcase 7:
INSERT INTO numbers VALUES(1, 'One');
--Testcase 8:
INSERT INTO numbers VALUES(2, 'Two');
--Testcase 9:
INSERT INTO numbers VALUES(3, 'Three');
--Testcase 10:
INSERT INTO numbers VALUES(4, 'Four');
--Testcase 11:
INSERT INTO numbers VALUES(5, 'Five');
--Testcase 12:
INSERT INTO numbers VALUES(6, 'Six');
--Testcase 13:
INSERT INTO numbers VALUES(7, 'Seven');
--Testcase 14:
INSERT INTO numbers VALUES(8, 'Eight');
--Testcase 15:
INSERT INTO numbers VALUES(9, 'Nine');
--Testcase 16:
SELECT count(*) FROM department;
 count 
-------
   100
(1 row)

--Testcase 17:
SELECT count(*) FROM employee;
 count 
-------
   100
(1 row)

--Testcase 18:
SELECT count(*) FROM empdata;
 count 
-------
     1
(1 row)

--Testcase 19:
EXPLAIN (COSTS FALSE) SELECT * FROM department d, employee e WHERE d.department_id = e.emp_dept_id LIMIT 10;
  QUERY PLAN  
--------------
 Foreign Scan
(1 row)

--Testcase 20:
EXPLAIN (COSTS FALSE) SELECT * FROM department d, employee e WHERE d.department_id IN (SELECT department_id FROM department) LIMIT 10;
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Limit
   ->  Nested Loop
         ->  Nested Loop Semi Join
               Join Filter: (d.department_id = department.department_id)
               ->  Foreign Scan on department d
               ->  Materialize
                     ->  Foreign Scan on department
         ->  Materialize
               ->  Foreign Scan on employee e
(9 rows)

--Testcase 21:
SELECT * FROM department d, employee e WHERE d.department_id = e.emp_dept_id LIMIT 10;
 department_id | department_name | emp_id | emp_name | emp_dept_id 
---------------+-----------------+--------+----------+-------------
             1 | dept - 1        |      1 | emp - 1  |           1
             2 | dept - 2        |      2 | emp - 2  |           2
             3 | dept - 3        |      3 | emp - 3  |           3
             4 | dept - 4        |      4 | emp - 4  |           4
             5 | dept - 5        |      5 | emp - 5  |           5
             6 | dept - 6        |      6 | emp - 6  |           6
             7 | dept - 7        |      7 | emp - 7  |           7
             8 | dept - 8        |      8 | emp - 8  |           8
             9 | dept - 9        |      9 | emp - 9  |           9
            10 | dept - 10       |     10 | emp - 10 |          10
(10 rows)

--Testcase 22:
SELECT * FROM department d, employee e WHERE d.department_id IN (SELECT department_id FROM department) ORDER BY d.department_id LIMIT 10;
 department_id | department_name | emp_id | emp_name | emp_dept_id 
---------------+-----------------+--------+----------+-------------
             1 | dept - 1        |      1 | emp - 1  |           1
             1 | dept - 1        |      2 | emp - 2  |           2
             1 | dept - 1        |      3 | emp - 3  |           3
             1 | dept - 1        |      4 | emp - 4  |           4
             1 | dept - 1        |      5 | emp - 5  |           5
             1 | dept - 1        |      6 | emp - 6  |           6
             1 | dept - 1        |      7 | emp - 7  |           7
             1 | dept - 1        |      8 | emp - 8  |           8
             1 | dept - 1        |      9 | emp - 9  |           9
             1 | dept - 1        |     10 | emp - 10 |          10
(10 rows)

--Testcase 23:
SELECT * FROM empdata;
 emp_id |  emp_dat   
--------+------------
      1 | \x01234567
(1 row)

--Testcase 24:
DELETE FROM employee WHERE emp_id = 10;
--Testcase 25:
SELECT COUNT(*) FROM department LIMIT 10;
 count 
-------
   100
(1 row)

--Testcase 26:
SELECT COUNT(*) FROM employee WHERE emp_id = 10;
 count 
-------
     0
(1 row)

--Testcase 27:
UPDATE employee SET emp_name = 'UPDATEd emp' WHERE emp_id = 20;
--Testcase 28:
SELECT emp_id, emp_name FROM employee WHERE emp_name like 'UPDATEd emp';
 emp_id |  emp_name   
--------+-------------
     20 | UPDATEd emp
(1 row)

--Testcase 29:
UPDATE empdata SET emp_dat = decode ('0123', 'hex');
--Testcase 30:
SELECT * FROM empdata;
 emp_id | emp_dat 
--------+---------
      1 | \x0123
(1 row)

--Testcase 31:
SELECT * FROM employee LIMIT 10;
 emp_id | emp_name | emp_dept_id 
--------+----------+-------------
      1 | emp - 1  |           1
      2 | emp - 2  |           2
      3 | emp - 3  |           3
      4 | emp - 4  |           4
      5 | emp - 5  |           5
      6 | emp - 6  |           6
      7 | emp - 7  |           7
      8 | emp - 8  |           8
      9 | emp - 9  |           9
     11 | emp - 11 |          11
(10 rows)

--Testcase 32:
SELECT * FROM employee WHERE emp_id IN (1);
 emp_id | emp_name | emp_dept_id 
--------+----------+-------------
      1 | emp - 1  |           1
(1 row)

--Testcase 33:
SELECT * FROM employee WHERE emp_id IN (1,3,4,5);
 emp_id | emp_name | emp_dept_id 
--------+----------+-------------
      1 | emp - 1  |           1
      3 | emp - 3  |           3
      4 | emp - 4  |           4
      5 | emp - 5  |           5
(4 rows)

--Testcase 34:
SELECT * FROM employee WHERE emp_id IN (10000,1000);
 emp_id | emp_name | emp_dept_id 
--------+----------+-------------
(0 rows)

--Testcase 35:
SELECT * FROM employee WHERE emp_id NOT IN (1) LIMIT 5;
 emp_id | emp_name | emp_dept_id 
--------+----------+-------------
      2 | emp - 2  |           2
      3 | emp - 3  |           3
      4 | emp - 4  |           4
      5 | emp - 5  |           5
      6 | emp - 6  |           6
(5 rows)

--Testcase 36:
SELECT * FROM employee WHERE emp_id NOT IN (1,3,4,5) LIMIT 5;
 emp_id | emp_name | emp_dept_id 
--------+----------+-------------
      2 | emp - 2  |           2
      6 | emp - 6  |           6
      7 | emp - 7  |           7
      8 | emp - 8  |           8
      9 | emp - 9  |           9
(5 rows)

--Testcase 37:
SELECT * FROM employee WHERE emp_id NOT IN (10000,1000) LIMIT 5;
 emp_id | emp_name | emp_dept_id 
--------+----------+-------------
      1 | emp - 1  |           1
      2 | emp - 2  |           2
      3 | emp - 3  |           3
      4 | emp - 4  |           4
      5 | emp - 5  |           5
(5 rows)

--Testcase 38:
SELECT * FROM employee WHERE emp_id NOT IN (SELECT emp_id FROM employee WHERE emp_id IN (1,10));
 emp_id |  emp_name   | emp_dept_id 
--------+-------------+-------------
      2 | emp - 2     |           2
      3 | emp - 3     |           3
      4 | emp - 4     |           4
      5 | emp - 5     |           5
      6 | emp - 6     |           6
      7 | emp - 7     |           7
      8 | emp - 8     |           8
      9 | emp - 9     |           9
     11 | emp - 11    |          11
     12 | emp - 12    |          12
     13 | emp - 13    |          13
     14 | emp - 14    |          14
     15 | emp - 15    |          15
     16 | emp - 16    |          16
     17 | emp - 17    |          17
     18 | emp - 18    |          18
     19 | emp - 19    |          19
     20 | UPDATEd emp |          20
     21 | emp - 21    |          21
     22 | emp - 22    |          22
     23 | emp - 23    |          23
     24 | emp - 24    |          24
     25 | emp - 25    |          25
     26 | emp - 26    |          26
     27 | emp - 27    |          27
     28 | emp - 28    |          28
     29 | emp - 29    |          29
     30 | emp - 30    |          30
     31 | emp - 31    |          31
     32 | emp - 32    |          32
     33 | emp - 33    |          33
     34 | emp - 34    |          34
     35 | emp - 35    |          35
     36 | emp - 36    |          36
     37 | emp - 37    |          37
     38 | emp - 38    |          38
     39 | emp - 39    |          39
     40 | emp - 40    |          40
     41 | emp - 41    |          41
     42 | emp - 42    |          42
     43 | emp - 43    |          43
     44 | emp - 44    |          44
     45 | emp - 45    |          45
     46 | emp - 46    |          46
     47 | emp - 47    |          47
     48 | emp - 48    |          48
     49 | emp - 49    |          49
     50 | emp - 50    |          50
     51 | emp - 51    |          51
     52 | emp - 52    |          52
     53 | emp - 53    |          53
     54 | emp - 54    |          54
     55 | emp - 55    |          55
     56 | emp - 56    |          56
     57 | emp - 57    |          57
     58 | emp - 58    |          58
     59 | emp - 59    |          59
     60 | emp - 60    |          60
     61 | emp - 61    |          61
     62 | emp - 62    |          62
     63 | emp - 63    |          63
     64 | emp - 64    |          64
     65 | emp - 65    |          65
     66 | emp - 66    |          66
     67 | emp - 67    |          67
     68 | emp - 68    |          68
     69 | emp - 69    |          69
     70 | emp - 70    |          70
     71 | emp - 71    |          71
     72 | emp - 72    |          72
     73 | emp - 73    |          73
     74 | emp - 74    |          74
     75 | emp - 75    |          75
     76 | emp - 76    |          76
     77 | emp - 77    |          77
     78 | emp - 78    |          78
     79 | emp - 79    |          79
     80 | emp - 80    |          80
     81 | emp - 81    |          81
     82 | emp - 82    |          82
     83 | emp - 83    |          83
     84 | emp - 84    |          84
     85 | emp - 85    |          85
     86 | emp - 86    |          86
     87 | emp - 87    |          87
     88 | emp - 88    |          88
     89 | emp - 89    |          89
     90 | emp - 90    |          90
     91 | emp - 91    |          91
     92 | emp - 92    |          92
     93 | emp - 93    |          93
     94 | emp - 94    |          94
     95 | emp - 95    |          95
     96 | emp - 96    |          96
     97 | emp - 97    |          97
     98 | emp - 98    |          98
     99 | emp - 99    |          99
    100 | emp - 100   |         100
(98 rows)

--Testcase 39:
SELECT * FROM employee WHERE emp_name NOT IN ('emp - 1', 'emp - 2') LIMIT 5;
 emp_id | emp_name | emp_dept_id 
--------+----------+-------------
      3 | emp - 3  |           3
      4 | emp - 4  |           4
      5 | emp - 5  |           5
      6 | emp - 6  |           6
      7 | emp - 7  |           7
(5 rows)

--Testcase 40:
SELECT * FROM employee WHERE emp_name NOT IN ('emp - 10') LIMIT 5;
 emp_id | emp_name | emp_dept_id 
--------+----------+-------------
      1 | emp - 1  |           1
      2 | emp - 2  |           2
      3 | emp - 3  |           3
      4 | emp - 4  |           4
      5 | emp - 5  |           5
(5 rows)

--Testcase 41:
SELECT * FROM numbers WHERE (CASE WHEN a % 2 = 0 THEN 1 WHEN a % 5 = 0 THEN 1 ELSE 0 END) = 1;
 a |   b   
---+-------
 2 | Two
 4 | Four
 5 | Five
 6 | Six
 8 | Eight
(5 rows)

--Testcase 42:
SELECT * FROM numbers WHERE (CASE b WHEN 'Two' THEN 1 WHEN 'Six' THEN 1 ELSE 0 END) = 1;
 a |  b  
---+-----
 2 | Two
 6 | Six
(2 rows)

--Testcase 152:
EXPLAIN VERBOSE SELECT * FROM numbers WHERE (round(abs(a)) = 1);
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on public.numbers  (cost=10.00..1.00 rows=1 width=520)
   Output: a, b
   SQLite query: SELECT `a`, `b` FROM main."numbers" WHERE ((round(abs(`a`)) = 1))
(3 rows)

--Testcase 153:
SELECT * FROM numbers WHERE (round(abs(a)) = 1);
 a |  b  
---+-----
 1 | One
(1 row)

--Testcase 137:
create or replace function test_param_WHERE() returns void as $$
DECLARE
  n varchar;
BEGIN
  FOR x IN 1..9 LOOP
--Testcase 138:
    SELECT b INTO n from numbers WHERE a=x;
    raise notice 'Found number %', n;
  end loop;
  return;
END
$$ LANGUAGE plpgsql;
--Testcase 43:
SELECT test_param_WHERE();
NOTICE:  Found number One
NOTICE:  Found number Two
NOTICE:  Found number Three
NOTICE:  Found number Four
NOTICE:  Found number Five
NOTICE:  Found number Six
NOTICE:  Found number Seven
NOTICE:  Found number Eight
NOTICE:  Found number Nine
 test_param_where 
------------------
 
(1 row)

--Testcase 44:
SELECT b from numbers WHERE a=1;
  b  
-----
 One
(1 row)

--Testcase 45:
EXPLAIN(COSTS OFF) SELECT b from numbers WHERE a=1;
       QUERY PLAN        
-------------------------
 Foreign Scan on numbers
(1 row)

--Testcase 46:
SELECT a FROM numbers WHERE b = (SELECT NULL::text);
 a 
---
(0 rows)

--Testcase 47:
PREPARE stmt1 (int, int) AS
  SELECT * FROM numbers WHERE a=$1 or a=$2;
--Testcase 48:
EXECUTE stmt1(1,2);
 a |  b  
---+-----
 1 | One
 2 | Two
(2 rows)

--Testcase 49:
EXECUTE stmt1(2,2); 
 a |  b  
---+-----
 2 | Two
(1 row)

--Testcase 50:
EXECUTE stmt1(3,2); 
 a |   b   
---+-------
 2 | Two
 3 | Three
(2 rows)

--Testcase 51:
EXECUTE stmt1(4,2);
 a |  b   
---+------
 2 | Two
 4 | Four
(2 rows)

-- generic plan
--Testcase 52:
EXECUTE stmt1(5,2); 
 a |  b   
---+------
 2 | Two
 5 | Five
(2 rows)

--Testcase 53:
EXECUTE stmt1(6,2); 
 a |  b  
---+-----
 2 | Two
 6 | Six
(2 rows)

--Testcase 54:
EXECUTE stmt1(7,2); 
 a |   b   
---+-------
 2 | Two
 7 | Seven
(2 rows)

--Testcase 55:
DELETE FROM employee;
--Testcase 56:
DELETE FROM department;
--Testcase 57:
DELETE FROM empdata;
--Testcase 58:
DELETE FROM numbers;
BEGIN;
--Testcase 59:
INSERT INTO numbers VALUES(1, 'One');
--Testcase 60:
INSERT INTO numbers VALUES(2, 'Two');
COMMIT;
--Testcase 61:
SELECT * from numbers;
 a |  b  
---+-----
 1 | One
 2 | Two
(2 rows)

BEGIN;
--Testcase 62:
INSERT INTO numbers VALUES(3, 'Three');
ROLLBACK;
--Testcase 63:
SELECT * from numbers;
 a |  b  
---+-----
 1 | One
 2 | Two
(2 rows)

BEGIN;
--Testcase 64:
INSERT INTO numbers VALUES(4, 'Four');
SAVEPOINT my_savepoint;
--Testcase 65:
INSERT INTO numbers VALUES(5, 'Five');
ROLLBACK TO SAVEPOINT my_savepoint;
--Testcase 66:
INSERT INTO numbers VALUES(6, 'Six');
COMMIT;
--Testcase 67:
SELECT * from numbers;
 a |  b   
---+------
 1 | One
 2 | Two
 4 | Four
 6 | Six
(4 rows)

-- duplicate key
--Testcase 68:
INSERT INTO numbers VALUES(1, 'One');
ERROR:  Failed to execute remote SQL
HINT:  SQLite error 'UNIQUE constraint failed: numbers.b', SQLite result code 19
CONTEXT:  SQL query: INSERT INTO main."numbers"(`a`, `b`) VALUES (?, ?)
--Testcase 69:
DELETE from numbers;
BEGIN;
--Testcase 70:
INSERT INTO numbers VALUES(1, 'One');
--Testcase 71:
INSERT INTO numbers VALUES(2, 'Two');
COMMIT;
-- violate unique constraint
--Testcase 72:
UPDATE numbers SET b='Two' WHERE a = 1; 
ERROR:  Failed to execute remote SQL
HINT:  SQLite error 'UNIQUE constraint failed: numbers.b', SQLite result code 19
CONTEXT:  SQL query: UPDATE main."numbers" SET `b` = 'Two' WHERE ((`a` = 1))
--Testcase 73:
SELECT * from numbers;
 a |  b  
---+-----
 1 | One
 2 | Two
(2 rows)

-- push down
--Testcase 74:
explain (verbose, costs off) SELECT * from numbers WHERE  a = any(ARRAY[2,3,4,5]::int[]);
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Foreign Scan on public.numbers
   Output: a, b
   SQLite query: SELECT `a`, `b` FROM main."numbers" WHERE (`a` IN (2, 3, 4, 5))
(3 rows)

-- (1,2,3) is pushed down
--Testcase 75:
explain (verbose, costs off) SELECT * from numbers WHERE a in (1,2,3) AND (1,2) < (a,5);
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Foreign Scan on public.numbers
   Output: a, b
   Filter: (ROW(1, 2) < ROW(numbers.a, 5))
   SQLite query: SELECT `a`, `b` FROM main."numbers" WHERE (`a` IN (1, 2, 3))
(4 rows)

--Testcase 76:
explain (verbose, costs off) SELECT * from numbers WHERE a in (a+2*a,5);
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Foreign Scan on public.numbers
   Output: a, b
   SQLite query: SELECT `a`, `b` FROM main."numbers" WHERE (((`a` = (`a` + (2 * `a`))) OR (`a` = 5)))
(3 rows)

--Testcase 77:
explain (verbose, costs off) SELECT * from numbers WHERE  a = any(ARRAY[1,2,a]::int[]);
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Foreign Scan on public.numbers
   Output: a, b
   SQLite query: SELECT `a`, `b` FROM main."numbers" WHERE (`a` IN (1, 2, `a`))
(3 rows)

--Testcase 78:
SELECT * from numbers WHERE  a = any(ARRAY[2,3,4,5]::int[]);
 a |  b  
---+-----
 2 | Two
(1 row)

--Testcase 79:
SELECT * from numbers WHERE  a = any(ARRAY[1,2,a]::int[]);
 a |  b  
---+-----
 1 | One
 2 | Two
(2 rows)

-- ANY with ARRAY expression
--Testcase 154:
EXPLAIN VERBOSE SELECT * FROM numbers WHERE a = ANY(ARRAY[1, a + 1]);
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on public.numbers  (cost=10.00..2.00 rows=2 width=520)
   Output: a, b
   SQLite query: SELECT `a`, `b` FROM main."numbers" WHERE (`a` IN (1, (`a` + 1)))
(3 rows)

--Testcase 155:
SELECT * FROM numbers WHERE a = ANY(ARRAY[1, a + 1]);
 a |  b  
---+-----
 1 | One
(1 row)

--Testcase 156:
EXPLAIN VERBOSE SELECT * FROM numbers WHERE a <> ANY(ARRAY[1, a + 1]);
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 Foreign Scan on public.numbers  (cost=10.00..150.00 rows=150 width=520)
   Output: a, b
   SQLite query: SELECT `a`, `b` FROM main."numbers" WHERE ((`a` <> 1) OR (`a` <> (`a` + 1)))
(3 rows)

--Testcase 157:
SELECT * FROM numbers WHERE a <> ANY(ARRAY[1, a + 1]);
 a |  b  
---+-----
 1 | One
 2 | Two
(2 rows)

--Testcase 158:
EXPLAIN VERBOSE SELECT * FROM numbers WHERE a >= ANY(ARRAY[1, a + 1]);
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 Foreign Scan on public.numbers  (cost=10.00..83.00 rows=83 width=520)
   Output: a, b
   SQLite query: SELECT `a`, `b` FROM main."numbers" WHERE ((`a` >= 1) OR (`a` >= (`a` + 1)))
(3 rows)

--Testcase 159:
SELECT * FROM numbers WHERE a >= ANY(ARRAY[1, a + 1]);
 a |  b  
---+-----
 1 | One
 2 | Two
(2 rows)

--Testcase 160:
EXPLAIN VERBOSE SELECT * FROM numbers WHERE a <= ANY(ARRAY[1, a + 1]);
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 Foreign Scan on public.numbers  (cost=10.00..83.00 rows=83 width=520)
   Output: a, b
   SQLite query: SELECT `a`, `b` FROM main."numbers" WHERE ((`a` <= 1) OR (`a` <= (`a` + 1)))
(3 rows)

--Testcase 161:
SELECT * FROM numbers WHERE a <= ANY(ARRAY[1, a + 1]);
 a |  b  
---+-----
 1 | One
 2 | Two
(2 rows)

--Testcase 162:
EXPLAIN VERBOSE SELECT * FROM numbers WHERE a > ANY(ARRAY[1, a + 1]);
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Foreign Scan on public.numbers  (cost=10.00..83.00 rows=83 width=520)
   Output: a, b
   SQLite query: SELECT `a`, `b` FROM main."numbers" WHERE ((`a` > 1) OR (`a` > (`a` + 1)))
(3 rows)

--Testcase 163:
SELECT * FROM numbers WHERE a > ANY(ARRAY[1, a + 1]);
 a |  b  
---+-----
 2 | Two
(1 row)

--Testcase 164:
EXPLAIN VERBOSE SELECT * FROM numbers WHERE a < ANY(ARRAY[1, a + 1]);
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Foreign Scan on public.numbers  (cost=10.00..83.00 rows=83 width=520)
   Output: a, b
   SQLite query: SELECT `a`, `b` FROM main."numbers" WHERE ((`a` < 1) OR (`a` < (`a` + 1)))
(3 rows)

--Testcase 165:
SELECT * FROM numbers WHERE a < ANY(ARRAY[1, a + 1]);
 a |  b  
---+-----
 1 | One
 2 | Two
(2 rows)

-- ANY with ARRAY const
--Testcase 166:
EXPLAIN VERBOSE SELECT * FROM numbers WHERE a = ANY(ARRAY[1, 2]);
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Foreign Scan on public.numbers  (cost=10.00..2.00 rows=2 width=520)
   Output: a, b
   SQLite query: SELECT `a`, `b` FROM main."numbers" WHERE (`a` IN (1, 2))
(3 rows)

--Testcase 167:
SELECT * FROM numbers WHERE a = ANY(ARRAY[1, 2]);
 a |  b  
---+-----
 1 | One
 2 | Two
(2 rows)

--Testcase 168:
EXPLAIN VERBOSE SELECT * FROM numbers WHERE a <> ANY(ARRAY[1, 2]);
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Foreign Scan on public.numbers  (cost=10.00..150.00 rows=150 width=520)
   Output: a, b
   SQLite query: SELECT `a`, `b` FROM main."numbers" WHERE (`a` <> 1 OR `a` <> 2)
(3 rows)

--Testcase 169:
SELECT * FROM numbers WHERE a <> ANY(ARRAY[1, 2]);
 a |  b  
---+-----
 1 | One
 2 | Two
(2 rows)

--Testcase 170:
EXPLAIN VERBOSE SELECT * FROM numbers WHERE a >= ANY(ARRAY[1, 2]);
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Foreign Scan on public.numbers  (cost=10.00..83.00 rows=83 width=520)
   Output: a, b
   SQLite query: SELECT `a`, `b` FROM main."numbers" WHERE (`a` >= 1 OR `a` >= 2)
(3 rows)

--Testcase 171:
SELECT * FROM numbers WHERE a >= ANY(ARRAY[1, 2]);
 a |  b  
---+-----
 1 | One
 2 | Two
(2 rows)

--Testcase 172:
EXPLAIN VERBOSE SELECT * FROM numbers WHERE a <= ANY(ARRAY[1, 2]);
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Foreign Scan on public.numbers  (cost=10.00..83.00 rows=83 width=520)
   Output: a, b
   SQLite query: SELECT `a`, `b` FROM main."numbers" WHERE (`a` <= 1 OR `a` <= 2)
(3 rows)

--Testcase 173:
SELECT * FROM numbers WHERE a <= ANY(ARRAY[1, 2]);
 a |  b  
---+-----
 1 | One
 2 | Two
(2 rows)

--Testcase 174:
EXPLAIN VERBOSE SELECT * FROM numbers WHERE a > ANY(ARRAY[1, 2]);
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Foreign Scan on public.numbers  (cost=10.00..83.00 rows=83 width=520)
   Output: a, b
   SQLite query: SELECT `a`, `b` FROM main."numbers" WHERE (`a` > 1 OR `a` > 2)
(3 rows)

--Testcase 175:
SELECT * FROM numbers WHERE a > ANY(ARRAY[1, 2]);
 a |  b  
---+-----
 2 | Two
(1 row)

--Testcase 176:
EXPLAIN VERBOSE SELECT * FROM numbers WHERE a < ANY(ARRAY[1, 2]);
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Foreign Scan on public.numbers  (cost=10.00..83.00 rows=83 width=520)
   Output: a, b
   SQLite query: SELECT `a`, `b` FROM main."numbers" WHERE (`a` < 1 OR `a` < 2)
(3 rows)

--Testcase 177:
SELECT * FROM numbers WHERE a < ANY(ARRAY[1, 2]);
 a |  b  
---+-----
 1 | One
(1 row)

--Testcase 210:
EXPLAIN VERBOSE SELECT * FROM numbers WHERE a = ANY('{1, 2, 3}');
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Foreign Scan on public.numbers  (cost=10.00..3.00 rows=3 width=520)
   Output: a, b
   SQLite query: SELECT `a`, `b` FROM main."numbers" WHERE (`a` IN (1, 2, 3))
(3 rows)

--Testcase 211:
SELECT * FROM numbers WHERE a = ANY('{1, 2, 3}');
 a |  b  
---+-----
 1 | One
 2 | Two
(2 rows)

--Testcase 212:
EXPLAIN VERBOSE SELECT * FROM numbers WHERE a <> ANY('{1, 2, 3}');
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 Foreign Scan on public.numbers  (cost=10.00..150.00 rows=150 width=520)
   Output: a, b
   SQLite query: SELECT `a`, `b` FROM main."numbers" WHERE (`a` <> 1 OR `a` <> 2 OR `a` <> 3)
(3 rows)

--Testcase 213:
SELECT * FROM numbers WHERE a <> ANY('{1, 2, 3}');
 a |  b  
---+-----
 1 | One
 2 | Two
(2 rows)

-- ALL with ARRAY expression
--Testcase 178:
EXPLAIN VERBOSE SELECT * FROM numbers WHERE a = ALL(ARRAY[1, a * 1]);
                                         QUERY PLAN                                          
---------------------------------------------------------------------------------------------
 Foreign Scan on public.numbers  (cost=10.00..1.00 rows=1 width=520)
   Output: a, b
   SQLite query: SELECT `a`, `b` FROM main."numbers" WHERE ((`a` = 1) AND (`a` = (`a` * 1)))
(3 rows)

--Testcase 179:
SELECT * FROM numbers WHERE a = ALL(ARRAY[1, a * 1]);
 a |  b  
---+-----
 1 | One
(1 row)

--Testcase 180:
EXPLAIN VERBOSE SELECT * FROM numbers WHERE a <> ALL(ARRAY[1, a + 1]);
                                      QUERY PLAN                                       
---------------------------------------------------------------------------------------
 Foreign Scan on public.numbers  (cost=10.00..148.00 rows=148 width=520)
   Output: a, b
   SQLite query: SELECT `a`, `b` FROM main."numbers" WHERE (`a` NOT IN (1, (`a` + 1)))
(3 rows)

--Testcase 181:
SELECT * FROM numbers WHERE a <> ALL(ARRAY[1, a + 1]);
 a |  b  
---+-----
 2 | Two
(1 row)

--Testcase 182:
EXPLAIN VERBOSE SELECT * FROM numbers WHERE a >= ALL(ARRAY[1, a / 1]);
                                          QUERY PLAN                                           
-----------------------------------------------------------------------------------------------
 Foreign Scan on public.numbers  (cost=10.00..17.00 rows=17 width=520)
   Output: a, b
   SQLite query: SELECT `a`, `b` FROM main."numbers" WHERE ((`a` >= 1) AND (`a` >= (`a` / 1)))
(3 rows)

--Testcase 183:
SELECT * FROM numbers WHERE a >= ALL(ARRAY[1, a / 1]);
 a |  b  
---+-----
 1 | One
 2 | Two
(2 rows)

--Testcase 184:
EXPLAIN VERBOSE SELECT * FROM numbers WHERE a <= ALL(ARRAY[1, a + 1]);
                                          QUERY PLAN                                           
-----------------------------------------------------------------------------------------------
 Foreign Scan on public.numbers  (cost=10.00..17.00 rows=17 width=520)
   Output: a, b
   SQLite query: SELECT `a`, `b` FROM main."numbers" WHERE ((`a` <= 1) AND (`a` <= (`a` + 1)))
(3 rows)

--Testcase 185:
SELECT * FROM numbers WHERE a <= ALL(ARRAY[1, a + 1]);
 a |  b  
---+-----
 1 | One
(1 row)

--Testcase 186:
EXPLAIN VERBOSE SELECT * FROM numbers WHERE a > ALL(ARRAY[1, a - 1]);
                                         QUERY PLAN                                          
---------------------------------------------------------------------------------------------
 Foreign Scan on public.numbers  (cost=10.00..17.00 rows=17 width=520)
   Output: a, b
   SQLite query: SELECT `a`, `b` FROM main."numbers" WHERE ((`a` > 1) AND (`a` > (`a` - 1)))
(3 rows)

--Testcase 187:
SELECT * FROM numbers WHERE a > ALL(ARRAY[1, a - 1]);
 a |  b  
---+-----
 2 | Two
(1 row)

--Testcase 188:
EXPLAIN VERBOSE SELECT * FROM numbers WHERE a < ALL(ARRAY[2, a + 1]);
                                         QUERY PLAN                                          
---------------------------------------------------------------------------------------------
 Foreign Scan on public.numbers  (cost=10.00..17.00 rows=17 width=520)
   Output: a, b
   SQLite query: SELECT `a`, `b` FROM main."numbers" WHERE ((`a` < 2) AND (`a` < (`a` + 1)))
(3 rows)

--Testcase 189:
SELECT * FROM numbers WHERE a < ALL(ARRAY[2, a + 1]);
 a |  b  
---+-----
 1 | One
(1 row)

-- ALL with ARRAY const
--Testcase 190:
EXPLAIN VERBOSE SELECT * FROM numbers WHERE a = ALL(ARRAY[1, 1]);
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Foreign Scan on public.numbers  (cost=10.00..1.00 rows=1 width=520)
   Output: a, b
   SQLite query: SELECT `a`, `b` FROM main."numbers" WHERE (`a` = 1 AND `a` = 1)
(3 rows)

--Testcase 191:
SELECT * FROM numbers WHERE a = ALL(ARRAY[1, 1]);
 a |  b  
---+-----
 1 | One
(1 row)

--Testcase 192:
EXPLAIN VERBOSE SELECT * FROM numbers WHERE a <> ALL(ARRAY[1, 3]);
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Foreign Scan on public.numbers  (cost=10.00..148.00 rows=148 width=520)
   Output: a, b
   SQLite query: SELECT `a`, `b` FROM main."numbers" WHERE (`a` NOT IN (1, 3))
(3 rows)

--Testcase 193:
SELECT * FROM numbers WHERE a <> ALL(ARRAY[1, 3]);
 a |  b  
---+-----
 2 | Two
(1 row)

--Testcase 194:
EXPLAIN VERBOSE SELECT * FROM numbers WHERE a >= ALL(ARRAY[1, 2]);
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on public.numbers  (cost=10.00..17.00 rows=17 width=520)
   Output: a, b
   SQLite query: SELECT `a`, `b` FROM main."numbers" WHERE (`a` >= 1 AND `a` >= 2)
(3 rows)

--Testcase 195:
SELECT * FROM numbers WHERE a >= ALL(ARRAY[1, 2]);
 a |  b  
---+-----
 2 | Two
(1 row)

--Testcase 196:
EXPLAIN VERBOSE SELECT * FROM numbers WHERE a <= ALL(ARRAY[1, 2]);
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on public.numbers  (cost=10.00..17.00 rows=17 width=520)
   Output: a, b
   SQLite query: SELECT `a`, `b` FROM main."numbers" WHERE (`a` <= 1 AND `a` <= 2)
(3 rows)

--Testcase 197:
SELECT * FROM numbers WHERE a <= ALL(ARRAY[1, 2]);
 a |  b  
---+-----
 1 | One
(1 row)

--Testcase 198:
EXPLAIN VERBOSE SELECT * FROM numbers WHERE a > ALL(ARRAY[0, 1]);
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Foreign Scan on public.numbers  (cost=10.00..17.00 rows=17 width=520)
   Output: a, b
   SQLite query: SELECT `a`, `b` FROM main."numbers" WHERE (`a` > 0 AND `a` > 1)
(3 rows)

--Testcase 199:
SELECT * FROM numbers WHERE a > ALL(ARRAY[0, 1]);
 a |  b  
---+-----
 2 | Two
(1 row)

--Testcase 200:
EXPLAIN VERBOSE SELECT * FROM numbers WHERE a < ALL(ARRAY[2, 3]);
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Foreign Scan on public.numbers  (cost=10.00..17.00 rows=17 width=520)
   Output: a, b
   SQLite query: SELECT `a`, `b` FROM main."numbers" WHERE (`a` < 2 AND `a` < 3)
(3 rows)

--Testcase 201:
SELECT * FROM numbers WHERE a < ALL(ARRAY[2, 3]);
 a |  b  
---+-----
 1 | One
(1 row)

-- ANY/ALL with TEXT ARRAY const
--Testcase 202:
EXPLAIN VERBOSE SELECT * FROM numbers WHERE b = ANY(ARRAY['One', 'Two']);
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on public.numbers  (cost=10.00..2.00 rows=2 width=520)
   Output: a, b
   SQLite query: SELECT `a`, `b` FROM main."numbers" WHERE (`b` IN ('One', 'Two'))
(3 rows)

--Testcase 203:
SELECT * FROM numbers WHERE b = ANY(ARRAY['One', 'Two']);
 a |  b  
---+-----
 1 | One
 2 | Two
(2 rows)

--Testcase 204:
EXPLAIN VERBOSE SELECT * FROM numbers WHERE b <> ALL(ARRAY['One', 'Four']);
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Foreign Scan on public.numbers  (cost=10.00..148.00 rows=148 width=520)
   Output: a, b
   SQLite query: SELECT `a`, `b` FROM main."numbers" WHERE (`b` NOT IN ('One', 'Four'))
(3 rows)

--Testcase 205:
SELECT * FROM numbers WHERE b <> ALL(ARRAY['One', 'Four']);
 a |  b  
---+-----
 2 | Two
(1 row)

--Testcase 206:
EXPLAIN VERBOSE SELECT * FROM numbers WHERE b > ANY(ARRAY['One', 'Two']);
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Foreign Scan on public.numbers  (cost=10.00..83.00 rows=83 width=520)
   Output: a, b
   SQLite query: SELECT `a`, `b` FROM main."numbers" WHERE (`b` > 'One' OR `b` > 'Two')
(3 rows)

--Testcase 207:
SELECT * FROM numbers WHERE b > ANY(ARRAY['One', 'Two']);
 a |  b  
---+-----
 2 | Two
(1 row)

--Testcase 208:
EXPLAIN VERBOSE SELECT * FROM numbers WHERE b > ALL(ARRAY['Four', 'Five']);
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Foreign Scan on public.numbers  (cost=10.00..17.00 rows=17 width=520)
   Output: a, b
   SQLite query: SELECT `a`, `b` FROM main."numbers" WHERE (`b` > 'Four' AND `b` > 'Five')
(3 rows)

--Testcase 209:
SELECT * FROM numbers WHERE b > ALL(ARRAY['Four', 'Five']);
 a |  b  
---+-----
 1 | One
 2 | Two
(2 rows)

--Testcase 80:
INSERT INTO multiprimary VALUES(1,2,3);
--Testcase 81:
INSERT INTO multiprimary VALUES(1,2,4);
--Testcase 82:
UPDATE multiprimary SET b = 10 WHERE c = 3;
--Testcase 83:
SELECT * from multiprimary;
 a | b  | c 
---+----+---
 1 | 10 | 3
 1 |  2 | 4
(2 rows)

--Testcase 84:
UPDATE multiprimary SET a = 10 WHERE a = 1;
--Testcase 85:
SELECT * from multiprimary;
 a  | b  | c 
----+----+---
 10 | 10 | 3
 10 |  2 | 4
(2 rows)

--Testcase 86:
UPDATE multiprimary SET a = 100, b=200, c=300 WHERE a=10 AND b=10;
--Testcase 87:
SELECT * from multiprimary;
  a  |  b  |  c  
-----+-----+-----
 100 | 200 | 300
  10 |   2 |   4
(2 rows)

--Testcase 88:
UPDATE multiprimary SET a = 1234;
--Testcase 89:
SELECT * from multiprimary;
  a   |  b  |  c  
------+-----+-----
 1234 | 200 | 300
 1234 |   2 |   4
(2 rows)

--Testcase 90:
UPDATE multiprimary SET a = a+1, b=b+1 WHERE b=200 AND c=300;
--Testcase 91:
SELECT * from multiprimary;
  a   |  b  |  c  
------+-----+-----
 1235 | 201 | 300
 1234 |   2 |   4
(2 rows)

--Testcase 92:
DELETE from multiprimary WHERE a = 1235;
--Testcase 93:
SELECT * from multiprimary;
  a   | b | c 
------+---+---
 1234 | 2 | 4
(1 row)

--Testcase 94:
DELETE from multiprimary WHERE b = 2;
--Testcase 95:
SELECT * from multiprimary;
 a | b | c 
---+---+---
(0 rows)

--Testcase 96:
INSERT INTO multiprimary VALUES(1,2,3);
--Testcase 97:
INSERT INTO multiprimary VALUES(1,2,4);
--Testcase 98:
INSERT INTO multiprimary VALUES(1,10,20);
--Testcase 99:
INSERT INTO multiprimary VALUES(2,20,40);
--Testcase 100:
SELECT count(distinct a) from multiprimary;
 count 
-------
     2
(1 row)

--Testcase 101:
SELECT sum(b),max(b), min(b) from multiprimary;
 sum | max | min 
-----+-----+-----
  34 |  20 |   2
(1 row)

--Testcase 102:
SELECT sum(b+5)+2 from multiprimary group by b/2 order by b/2;
 ?column? 
----------
       16
       17
       27
(3 rows)

--Testcase 103:
SELECT sum(a) from multiprimary group by b having sum(a) > 0 order by sum(a);
 sum 
-----
   1
   2
   2
(3 rows)

--Testcase 104:
SELECT sum(a) A from multiprimary group by b having avg(abs(a)) > 0 AND sum(a) > 0 order by A;
 a 
---
 1
 2
 2
(3 rows)

--Testcase 105:
SELECT count(nullif(a, 1)) FROM multiprimary;
 count 
-------
     1
(1 row)

--Testcase 106:
SELECT a,a FROM multiprimary group by 1,2;
 a | a 
---+---
 1 | 1
 2 | 2
(2 rows)

--Testcase 107:
SELECT * from multiprimary, numbers WHERE multiprimary.a=numbers.a;
 a | b  | c  | a |  b  
---+----+----+---+-----
 1 |  2 |  3 | 1 | One
 1 |  2 |  4 | 1 | One
 1 | 10 | 20 | 1 | One
 2 | 20 | 40 | 2 | Two
(4 rows)

--Testcase 108:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT sum(a) FROM multiprimary HAVING sum(a) > 0;
                        QUERY PLAN                         
-----------------------------------------------------------
 Aggregate
   Output: sum(a)
   Filter: (sum(multiprimary.a) > 0)
   ->  Foreign Scan on public.multiprimary
         Output: a, b, c
         SQLite query: SELECT `a` FROM main."multiprimary"
(6 rows)

--Testcase 109:
SELECT sum(a) FROM multiprimary HAVING sum(a) > 0;
 sum 
-----
   5
(1 row)

--Testcase 110:
INSERT INTO numbers VALUES(4, 'Four');
-- All where clauses are pushed down
--Testcase 111:
SELECT * FROM numbers WHERE abs(a) = 4 AND upper(b) = 'FOUR' AND lower(b) = 'four';
 a |  b   
---+------
 4 | Four
(1 row)

--Testcase 112:
EXPLAIN (verbose, costs off)  SELECT b, length(b) FROM numbers WHERE abs(a) = 4 AND upper(b) = 'FOUR' AND lower(b) = 'four';
                                             QUERY PLAN                                              
-----------------------------------------------------------------------------------------------------
 Foreign Scan on public.numbers
   Output: b, length((b)::text)
   Filter: ((upper((numbers.b)::text) = 'FOUR'::text) AND (lower((numbers.b)::text) = 'four'::text))
   SQLite query: SELECT `b` FROM main."numbers" WHERE ((abs(`a`) = 4))
(4 rows)

-- Only "length(b) = 4" are pushed down
--Testcase 113:
SELECT b, length(b) FROM numbers WHERE length(b) = 4 AND power(1, a) != 0 AND length(reverse(b)) = 4;
  b   | length 
------+--------
 Four |      4
(1 row)

--Testcase 114:
EXPLAIN (verbose, costs off) SELECT b, length(b) FROM numbers WHERE length(b) = 4 AND power(1, a) != 0 AND length(reverse(b)) = 4;
                                                                   QUERY PLAN                                                                    
-------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.numbers
   Output: b, length((b)::text)
   Filter: ((power('1'::double precision, (numbers.a)::double precision) <> '0'::double precision) AND (length(reverse((numbers.b)::text)) = 4))
   SQLite query: SELECT `a`, `b` FROM main."numbers" WHERE ((length(`b`) = 4))
(4 rows)

--Testcase 115:
INSERT INTO multiprimary (b,c) VALUES (99, 100);
--Testcase 116:
SELECT c FROM multiprimary WHERE COALESCE(a,b,c) = 99;
  c  
-----
 100
(1 row)

--Testcase 139:
CREATE FOREIGN TABLE multiprimary2(a int, b int, c int OPTIONS(column_name 'b')) SERVER sqlite_svr OPTIONS (table 'multiprimary');
--Testcase 117:
SELECT * FROM multiprimary2;
 a | b  | c  
---+----+----
 1 |  2 |  2
 1 |  2 |  2
 1 | 10 | 10
 2 | 20 | 20
   | 99 | 99
(5 rows)

--Testcase 214:
ALTER FOREIGN TABLE multiprimary2 ALTER COLUMN a OPTIONS(ADD column_name 'b');
--Testcase 118:
SELECT * FROM multiprimary2;
 a  | b  | c  
----+----+----
  2 |  2 |  2
  2 |  2 |  2
 10 | 10 | 10
 20 | 20 | 20
 99 | 99 | 99
(5 rows)

--Testcase 215:
ALTER FOREIGN TABLE multiprimary2 ALTER COLUMN b OPTIONS (column_name 'nosuch column');
--Testcase 119:
SELECT * FROM multiprimary2;
ERROR:  SQL error during prepare: no such column: nosuch column
CONTEXT:  SELECT `b`, `nosuch column`, `b` FROM main."multiprimary"
--Testcase 140:
EXPLAIN (VERBOSE) SELECT * FROM multiprimary2;
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Foreign Scan on public.multiprimary2  (cost=10.00..2275.00 rows=2275 width=12)
   Output: a, b, c
   SQLite query: SELECT `b`, `nosuch column`, `b` FROM main."multiprimary"
(3 rows)

--Testcase 120:
SELECT a FROM multiprimary2 WHERE b = 1;
ERROR:  SQL error during prepare: no such column: nosuch column
CONTEXT:  SELECT `b` FROM main."multiprimary" WHERE ((`nosuch column` = 1))
--Testcase 141:
CREATE FOREIGN TABLE columntest(a int OPTIONS(column_name 'a a', key 'true'), "b b" int  OPTIONS(key 'true'), c int OPTIONS(column_name 'c c')) SERVER sqlite_svr;
--Testcase 121:
INSERT INTO columntest VALUES(1,2,3);
--Testcase 122:
UPDATE columntest SET c=10 WHERE a = 1;
--Testcase 123:
SELECT * FROM columntest;
 a | b b | c  
---+-----+----
 1 |   2 | 10
(1 row)

--Testcase 124:
UPDATE columntest SET a=100 WHERE c = 10;
--Testcase 125:
SELECT * FROM columntest;
  a  | b b | c  
-----+-----+----
 100 |   2 | 10
(1 row)

--Testcase 126:
INSERT INTO noprimary VALUES(1,'2');
--Testcase 127:
INSERT INTO noprimary SELECT * FROM noprimary;
--Testcase 128:
SELECT * FROM noprimary;
 a | b 
---+---
 1 | 2
 1 | 2
(2 rows)

--get version
--Testcase 153:
\df sqlite*
                                                                                                                                           List of functions
 Schema |                 Name                 |                                                           Result data type                                                           |                                           Argument data types                                            | Type 
--------+--------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------------+------
 public | sqlite_fdw_db_application_id         | integer                                                                                                                              | server name, schema name DEFAULT 'main'::name                                                            | func
 public | sqlite_fdw_db_attach                 | integer                                                                                                                              | server name, sqlite_db_string text, sqlite_db_alias name, integrity_check_mode text DEFAULT 'full'::text | func
 public | sqlite_fdw_db_auto_vacuum            | character varying                                                                                                                    | server name, schema name DEFAULT 'main'::name                                                            | func
 public | sqlite_fdw_db_cache_size             | integer                                                                                                                              | server name, schema name DEFAULT 'main'::name                                                            | func
 public | sqlite_fdw_db_cache_spill            | integer                                                                                                                              | server name, schema name DEFAULT 'main'::name                                                            | func
 public | sqlite_fdw_db_detach                 | void                                                                                                                                 | server name, sqlite_db_alias name                                                                        | func
 public | sqlite_fdw_db_encoding               | character varying                                                                                                                    | server name                                                                                              | func
 public | sqlite_fdw_db_exclusive_locking_mode | boolean                                                                                                                              | server name, schema name DEFAULT 'main'::name                                                            | func
 public | sqlite_fdw_db_fkeys                  | boolean                                                                                                                              | server name, schema name DEFAULT 'main'::name                                                            | func
 public | sqlite_fdw_db_fkeys_check            | TABLE(source_table name, rowid bigint, fk_from_table name, i integer)                                                                | server name, "table" name, schema name DEFAULT 'main'::name                                              | func
 public | sqlite_fdw_db_fkeys_list             | TABLE(i integer, j integer, source_table name, column_name name, "constraint" name, onupd text, ondel text, f8 text)                 | server name, "table" name, schema name DEFAULT 'main'::name                                              | func
 public | sqlite_fdw_db_journal_mode           | character varying                                                                                                                    | server name, schema name DEFAULT 'main'::name                                                            | func
 public | sqlite_fdw_db_journal_size_limit     | integer                                                                                                                              | server name, schema name DEFAULT 'main'::name                                                            | func
 public | sqlite_fdw_db_list                   | TABLE(sqlite_id integer, alias name, file text, readonly boolean, txn character varying)                                             | server name                                                                                              | func
 public | sqlite_fdw_db_max_page_count         | integer                                                                                                                              | server name, schema name DEFAULT 'main'::name                                                            | func
 public | sqlite_fdw_db_page_size              | integer                                                                                                                              | server name, schema name DEFAULT 'main'::name                                                            | func
 public | sqlite_fdw_db_schema_version         | integer                                                                                                                              | server name, schema name DEFAULT 'main'::name                                                            | func
 public | sqlite_fdw_db_secure_delete          | integer                                                                                                                              | server name, schema name DEFAULT 'main'::name                                                            | func
 public | sqlite_fdw_db_synchronous_mode       | character varying                                                                                                                    | server name, schema name DEFAULT 'main'::name                                                            | func
 public | sqlite_fdw_db_temp_store             | character varying                                                                                                                    | server name, schema name DEFAULT 'main'::name                                                            | func
 public | sqlite_fdw_db_tmp_directory          | text                                                                                                                                 | server name, schema name DEFAULT 'main'::name                                                            | func
 public | sqlite_fdw_db_user_version           | integer                                                                                                                              | server name, schema name DEFAULT 'main'::name                                                            | func
 public | sqlite_fdw_db_wal_checkpoint         | TABLE(blocked boolean, mod_pages_in_wal integer, pages_suc_wr_to_db integer)                                                         | server name, schema name DEFAULT 'main'::name                                                            | func
 public | sqlite_fdw_disconnect                | boolean                                                                                                                              | name                                                                                                     | func
 public | sqlite_fdw_disconnect_all            | boolean                                                                                                                              |                                                                                                          | func
 public | sqlite_fdw_get_connections           | SETOF record                                                                                                                         | OUT server_name text, OUT valid boolean                                                                  | func
 public | sqlite_fdw_handler                   | fdw_handler                                                                                                                          |                                                                                                          | func
 public | sqlite_fdw_index_list                | TABLE(sqlite_id integer, index_name name, "unique" boolean, source character varying, partial boolean)                               | server name, "table" name, schema name DEFAULT 'main'::name                                              | func
 public | sqlite_fdw_mem                       | bigint                                                                                                                               |                                                                                                          | func
 public | sqlite_fdw_rel_list                  | TABLE(schema name, "table" name, type text, ncol integer, no_rowid boolean, strict boolean)                                          | server name, schema name DEFAULT 'main'::name                                                            | func
 public | sqlite_fdw_sqlite_code_source        | text                                                                                                                                 |                                                                                                          | func
 public | sqlite_fdw_sqlite_version            | integer                                                                                                                              |                                                                                                          | func
 public | sqlite_fdw_table_info                | TABLE(sqlite_id integer, "column" name, type text, "notnull" boolean, default_value text, pk boolean, column_mode character varying) | server name, "table" name, schema name DEFAULT 'main'::name                                              | func
 public | sqlite_fdw_validator                 | void                                                                                                                                 | text[], oid                                                                                              | func
 public | sqlite_fdw_version                   | integer                                                                                                                              |                                                                                                          | func
(35 rows)

--Testcase 154:
SELECT * FROM public.sqlite_fdw_version();
 sqlite_fdw_version 
--------------------
              20400
(1 row)

--Testcase 155:
SELECT sqlite_fdw_version();
 sqlite_fdw_version 
--------------------
              20400
(1 row)

-- issue #44 github
--Testcase 156:
CREATE FOREIGN TABLE fts_table (name text,  description text) SERVER sqlite_svr;
--Testcase 157:
INSERT INTO fts_table VALUES ('this is name', 'this is description');
--Testcase 158:
SELECT * FROM fts_table; -- should work
     name     |     description     
--------------+---------------------
 this is name | this is description
(1 row)

--Testcase 159:
ALTER TABLE fts_table ALTER COLUMN name TYPE int;
--Testcase 160:
SELECT * FROM fts_table; -- should fail
ERROR:  SQLite value is not compatible with PostgreSQL column data type
HINT:  SQLite value with "text" affinity (12 bytes) : 'this is name'
CONTEXT:  foreign table "fts_table" foreign column "name" have data type "integer" (usual affinity "integer"), in query there is whole-row reference to foreign table
-- issue #62 github
--Testcase 236:
INSERT INTO noprimary VALUES (4, 'Test''s');
--Testcase 237:
INSERT INTO noprimary VALUES (5, 'Test');
--Testcase 238:
SELECT * FROM noprimary;
 a |   b    
---+--------
 1 | 2
 1 | 2
 4 | Test's
 5 | Test
(4 rows)

--Testcase 239:
EXPLAIN VERBOSE
SELECT * FROM noprimary where b = 'Test''s';
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Foreign Scan on public.noprimary  (cost=10.00..7.00 rows=7 width=36)
   Output: a, b
   SQLite query: SELECT `a`, `b` FROM main."noprimary" WHERE ((`b` = 'Test''s'))
(3 rows)

--Testcase 240:
SELECT * FROM noprimary where b = 'Test''s';
 a |   b    
---+--------
 4 | Test's
(1 row)

--Testcase 241:
EXPLAIN VERBOSE
SELECT * FROM noprimary where b in ('Test''s', 'Test');
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Foreign Scan on public.noprimary  (cost=10.00..14.00 rows=14 width=36)
   Output: a, b
   SQLite query: SELECT `a`, `b` FROM main."noprimary" WHERE (`b` IN ('Test''s', 'Test'))
(3 rows)

--Testcase 242:
SELECT * FROM noprimary where b in ('Test''s', 'Test');
 a |   b    
---+--------
 4 | Test's
 5 | Test
(2 rows)

-- INSERT/UPDATE whole row with generated column
--Testcase 216:
CREATE FOREIGN TABLE grem1_1 (
  a int generated always as (0) stored)
  SERVER sqlite_svr OPTIONS(table 'grem1_1');
--Testcase 217:
INSERT INTO grem1_1 DEFAULT VALUES;
--Testcase 218:
SELECT * FROM grem1_1;
 a 
---
  
(1 row)

--Testcase 219:
CREATE FOREIGN TABLE grem1_2 (
  a int generated always as (0) stored,
  b int generated always as (1) stored,
  c int generated always as (2) stored,
  d int generated always as (3) stored)
  SERVER sqlite_svr OPTIONS(table 'grem1_2');
--Testcase 220:
INSERT INTO grem1_2 DEFAULT VALUES;
--Testcase 221:
SELECT * FROM grem1_2;
 a | b | c | d 
---+---+---+---
   |   |   |  
(1 row)

-- Executable test case for pushdown CASE expressions (results)
--Testcase 224:
CREATE FOREIGN TABLE case_exp(c1 int OPTIONS (key 'true'), c3 text, c6 varchar(10)) SERVER sqlite_svr;
--Testcase 225:
INSERT INTO case_exp
  SELECT id,
         to_char(id, 'FM00000'),
         id % 10
  FROM generate_series(1, 10) id;
--Testcase 226:
SELECT * FROM case_exp;
 c1 |  c3   | c6 
----+-------+----
  1 | 00001 | 1
  2 | 00002 | 2
  3 | 00003 | 3
  4 | 00004 | 4
  5 | 00005 | 5
  6 | 00006 | 6
  7 | 00007 | 7
  8 | 00008 | 8
  9 | 00009 | 9
 10 | 00010 | 0
(10 rows)

-- CASE arg WHEN
--Testcase 227:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM case_exp WHERE c1 > (CASE mod(c1, 4) WHEN 0 THEN 1 WHEN 2 THEN 50 ELSE 100 END);
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.case_exp
   Output: c1, c3, c6
   SQLite query: SELECT `c1`, `c3`, `c6` FROM main."case_exp" WHERE ((`c1` > CASE mod(`c1`, 4) WHEN 0 THEN 1 WHEN 2 THEN 50 ELSE 100 END))
(3 rows)

--Testcase 228:
SELECT * FROM case_exp WHERE c1 > (CASE mod(c1, 4) WHEN 0 THEN 1 WHEN 2 THEN 50 ELSE 100 END);
 c1 |  c3   | c6 
----+-------+----
  4 | 00004 | 4
  8 | 00008 | 8
(2 rows)

-- these are shippable
--Testcase 229:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM case_exp WHERE CASE c6 WHEN 'foo' THEN true ELSE c3 < 'bar' END;
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.case_exp
   Output: c1, c3, c6
   SQLite query: SELECT `c1`, `c3`, `c6` FROM main."case_exp" WHERE (CASE `c6` WHEN 'foo' THEN 1 ELSE (`c3` < 'bar') END)
(3 rows)

--Testcase 230:
SELECT * FROM case_exp WHERE CASE c6 WHEN 'foo' THEN true ELSE c3 < 'bar' END;
 c1 |  c3   | c6 
----+-------+----
  1 | 00001 | 1
  2 | 00002 | 2
  3 | 00003 | 3
  4 | 00004 | 4
  5 | 00005 | 5
  6 | 00006 | 6
  7 | 00007 | 7
  8 | 00008 | 8
  9 | 00009 | 9
 10 | 00010 | 0
(10 rows)

--Testcase 231:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM case_exp WHERE CASE c3 WHEN c6 THEN true ELSE c3 < 'bar' END;
                                                       QUERY PLAN                                                        
-------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.case_exp
   Output: c1, c3, c6
   SQLite query: SELECT `c1`, `c3`, `c6` FROM main."case_exp" WHERE (CASE `c3` WHEN `c6` THEN 1 ELSE (`c3` < 'bar') END)
(3 rows)

--Testcase 232:
SELECT * FROM case_exp WHERE CASE c3 WHEN c6 THEN true ELSE c3 < 'bar' END;
 c1 |  c3   | c6 
----+-------+----
  1 | 00001 | 1
  2 | 00002 | 2
  3 | 00003 | 3
  4 | 00004 | 4
  5 | 00005 | 5
  6 | 00006 | 6
  7 | 00007 | 7
  8 | 00008 | 8
  9 | 00009 | 9
 10 | 00010 | 0
(10 rows)

-- but this is not because of collation
--Testcase 233:
SELECT * FROM case_exp WHERE CASE c3 COLLATE "C" WHEN c6 THEN true ELSE c3 < 'bar' END;
 c1 |  c3   | c6 
----+-------+----
  1 | 00001 | 1
  2 | 00002 | 2
  3 | 00003 | 3
  4 | 00004 | 4
  5 | 00005 | 5
  6 | 00006 | 6
  7 | 00007 | 7
  8 | 00008 | 8
  9 | 00009 | 9
 10 | 00010 | 0
(10 rows)

--Testcase 234:
DELETE FROM case_exp;
-- readonly/readwrite tests
-- Full combinations
-- force_RO default SERVER default TABLE default
-- force_RO default SERVER true    TABLE default
-- force_RO default SERVER false   TABLE default
-- force_RO default SERVER default TABLE true
-- force_RO default SERVER default TABLE false
-- force_RO default SERVER true    TABLE true
-- force_RO default SERVER false   TABLE true
-- force_RO default SERVER false   TABLE false
-- force_RO default SERVER true    TABLE false
-- force_RO false   SERVER default TABLE default
-- force_RO false   SERVER true    TABLE default
-- force_RO false   SERVER false   TABLE default
-- force_RO false   SERVER default TABLE true
-- force_RO false   SERVER default TABLE false
-- force_RO false   SERVER true    TABLE true
-- force_RO false   SERVER false   TABLE true
-- force_RO false   SERVER false   TABLE false
-- force_RO false   SERVER true    TABLE false
-- force_RO true    SERVER default TABLE default
-- force_RO true    SERVER true    TABLE default
-- force_RO true    SERVER false   TABLE default
-- force_RO true    SERVER default TABLE true
-- force_RO true    SERVER default TABLE false
-- force_RO true    SERVER true    TABLE true
-- force_RO true    SERVER false   TABLE true
-- force_RO true    SERVER false   TABLE false
-- force_RO true    SERVER true    TABLE false
-- force_RO default SERVER default TABLE default
--Testcase 235:
SELECT * FROM sqlite_fdw_db_list('sqlite_svr');
 sqlite_id | alias |              file              | readonly | txn  
-----------+-------+--------------------------------+----------+------
         0 | main  | /tmp/sqlite_fdw_test/common.db | f        | none
(1 row)

--Testcase 236:
INSERT INTO RO_RW_test (i, a, b, c) VALUES (2, 'B', 3.01, 1); -- OK
--Testcase 237:
UPDATE RO_RW_test SET a='C' WHERE i=2; -- OK
--Testcase 238:
DELETE FROM RO_RW_test WHERE i=2; -- OK
-- force_RO default SERVER true TABLE default
--Testcase 239:
ALTER SERVER sqlite_svr OPTIONS (ADD updatable 'true');
--Testcase 240:
INSERT INTO RO_RW_test (i, a, b, c) VALUES (3, 'D', 5.02, 8); -- OK
--Testcase 241:
UPDATE RO_RW_test SET a='E' WHERE i=3; -- OK
--Testcase 242:
DELETE FROM RO_RW_test WHERE i=3; -- OK
--Testcase 243:
INSERT INTO RO_RW_test (i, a, b, c) VALUES (4, 'F', 0.005, 5); -- OK
-- force_RO default SERVER false TABLE default
--Testcase 244:
ALTER SERVER sqlite_svr OPTIONS (SET updatable 'false');
--Testcase 245:
INSERT INTO RO_RW_test (i, a, b, c) VALUES (5, 'H', 0.03, 7); -- ERR
ERROR:  foreign table "ro_rw_test" does not allow inserts
--Testcase 246:
UPDATE RO_RW_test SET a='E' WHERE i=4; -- ERR
ERROR:  foreign table "ro_rw_test" does not allow updates
--Testcase 246:
DELETE FROM RO_RW_test WHERE i=4; -- ERR
ERROR:  foreign table "ro_rw_test" does not allow deletes
-- force_RO default SERVER default TABLE true
--Testcase 247:
ALTER SERVER sqlite_svr OPTIONS (DROP updatable);
--Testcase 248:
ALTER FOREIGN TABLE RO_RW_test OPTIONS (ADD updatable 'true');
--Testcase 249:
INSERT INTO RO_RW_test (i, a, b, c) VALUES (6, 'I', 1.403, 2); -- OK
--Testcase 250:
UPDATE RO_RW_test SET a='J' WHERE i=6; -- OK
--Testcase 251:
DELETE FROM RO_RW_test WHERE i=6; -- OK
-- force_RO default SERVER default TABLE false
--Testcase 252:
ALTER FOREIGN TABLE RO_RW_test OPTIONS (SET updatable 'false');
--Testcase 253:
INSERT INTO RO_RW_test (i, a, b, c) VALUES (7, 'K', 2.01, 4); -- ERR
ERROR:  foreign table "ro_rw_test" does not allow inserts
--Testcase 254:
UPDATE RO_RW_test SET a='L' WHERE i=4; -- ERR
ERROR:  foreign table "ro_rw_test" does not allow updates
--Testcase 255:
DELETE FROM RO_RW_test WHERE i=4; -- ERR
ERROR:  foreign table "ro_rw_test" does not allow deletes
-- force_RO default SERVER true TABLE true
--Testcase 256:
ALTER SERVER sqlite_svr OPTIONS (ADD updatable 'true');
--Testcase 257:
ALTER FOREIGN TABLE RO_RW_test OPTIONS (SET updatable 'true');
--Testcase 258:
INSERT INTO RO_RW_test (i, a, b, c) VALUES (8, 'M', 5.02, 8); -- OK
--Testcase 258:
UPDATE RO_RW_test SET a='N' WHERE i=8; -- OK
--Testcase 260:
DELETE FROM RO_RW_test WHERE i=8; -- OK
--Testcase 261:
INSERT INTO RO_RW_test (i, a, b, c) VALUES (9, 'O', 3.21, 9); -- OK
-- force_RO default SERVER false TABLE true
--Testcase 262:
ALTER SERVER sqlite_svr OPTIONS (SET updatable 'false');
--Testcase 263:
INSERT INTO RO_RW_test (i, a, b, c) VALUES (10, 'P', 4.15, 1); -- OK
--Testcase 264:
UPDATE RO_RW_test SET a='Q' WHERE i=9; -- OK
--Testcase 265:
DELETE FROM RO_RW_test WHERE i=9; -- OK
-- force_RO default SERVER false TABLE false
--Testcase 266:
ALTER FOREIGN TABLE RO_RW_test OPTIONS (SET updatable 'false');
--Testcase 267:
INSERT INTO RO_RW_test (i, a, b, c) VALUES (11, 'Q', 2.27, 5); -- ERR
ERROR:  foreign table "ro_rw_test" does not allow inserts
--Testcase 268:
UPDATE RO_RW_test SET a='S' WHERE i=9; -- ERR
ERROR:  foreign table "ro_rw_test" does not allow updates
--Testcase 269:
DELETE FROM RO_RW_test WHERE i=9; -- ERR
ERROR:  foreign table "ro_rw_test" does not allow deletes
-- force_RO default SERVER true TABLE false
--Testcase 270:
ALTER SERVER sqlite_svr OPTIONS (SET updatable 'true');
--Testcase 271:
INSERT INTO RO_RW_test (i, a, b, c) VALUES (12, 'R', 6.18, 11); -- ERR
ERROR:  foreign table "ro_rw_test" does not allow inserts
--Testcase 272:
UPDATE RO_RW_test SET a='T' WHERE i=9; -- ERR
ERROR:  foreign table "ro_rw_test" does not allow updates
--Testcase 273:
DELETE FROM RO_RW_test WHERE i=9; -- ERR
ERROR:  foreign table "ro_rw_test" does not allow deletes
--Testcase 274:
ALTER SERVER sqlite_svr OPTIONS (DROP updatable);
--Testcase 275:
ALTER FOREIGN TABLE RO_RW_test OPTIONS (DROP updatable);
--Testcase 276:
SELECT * FROM RO_RW_test ORDER BY i;
 i  | a |   b   | c 
----+---+-------+---
  1 | A | 1.001 | 0
  4 | F | 0.005 | 5
 10 | P |  4.15 | 1
(3 rows)

--Bind error message test for some unsupported data type
--Testcase 277:
ALTER FOREIGN TABLE numbers ALTER COLUMN b TYPE tsquery;
--Testcase 278:
INSERT INTO numbers VALUES(8,'fat & (rat | cat)');
ERROR:  cannot convert constant value to Sqlite value
HINT:  Constant value data type: "tsquery" in column "b"
--Testcase 279:
ALTER FOREIGN TABLE numbers ALTER COLUMN b TYPE varchar(255);
--Testcase 277:
DELETE FROM RO_RW_test;
--Testcase 278:
ALTER SERVER sqlite_svr OPTIONS (ADD force_readonly 'false');
-- force_RO false SERVER default TABLE default
--Testcase 279:
SELECT * FROM sqlite_fdw_db_list('sqlite_svr');
 sqlite_id | alias |              file              | readonly | txn  
-----------+-------+--------------------------------+----------+------
         0 | main  | /tmp/sqlite_fdw_test/common.db | f        | none
(1 row)

--Testcase 280:
INSERT INTO RO_RW_test (i, a, b, c) VALUES (2, 'B', 3.01, 1); -- OK
--Testcase 281:
UPDATE RO_RW_test SET a='C' WHERE i=2; -- OK
--Testcase 282:
DELETE FROM RO_RW_test WHERE i=2; -- OK
-- force_RO false SERVER true TABLE default
--Testcase 283:
ALTER SERVER sqlite_svr OPTIONS (ADD updatable 'true');
--Testcase 284:
INSERT INTO RO_RW_test (i, a, b, c) VALUES (3, 'D', 5.02, 8); -- OK
--Testcase 285:
UPDATE RO_RW_test SET a='E' WHERE i=3; -- OK
--Testcase 286:
DELETE FROM RO_RW_test WHERE i=3; -- OK
--Testcase 287:
INSERT INTO RO_RW_test (i, a, b, c) VALUES (4, 'F', 0.005, 5); -- OK
-- force_RO false SERVER false TABLE default
--Testcase 288:
ALTER SERVER sqlite_svr OPTIONS (SET updatable 'false');
--Testcase 289:
INSERT INTO RO_RW_test (i, a, b, c) VALUES (5, 'H', 0.03, 7); -- ERR
ERROR:  foreign table "ro_rw_test" does not allow inserts
--Testcase 290:
UPDATE RO_RW_test SET a='E' WHERE i=4; -- ERR
ERROR:  foreign table "ro_rw_test" does not allow updates
--Testcase 291:
DELETE FROM RO_RW_test WHERE i=4; -- ERR
ERROR:  foreign table "ro_rw_test" does not allow deletes
-- force_RO false SERVER default TABLE true
--Testcase 292:
ALTER SERVER sqlite_svr OPTIONS (DROP updatable);
--Testcase 293:
ALTER FOREIGN TABLE RO_RW_test OPTIONS (ADD updatable 'true');
--Testcase 294:
INSERT INTO RO_RW_test (i, a, b, c) VALUES (6, 'I', 1.403, 2); -- OK
--Testcase 295:
UPDATE RO_RW_test SET a='J' WHERE i=6; -- OK
--Testcase 296:
DELETE FROM RO_RW_test WHERE i=6; -- OK
-- force_RO false SERVER default TABLE false
--Testcase 297:
ALTER FOREIGN TABLE RO_RW_test OPTIONS (SET updatable 'false');
--Testcase 298:
INSERT INTO RO_RW_test (i, a, b, c) VALUES (7, 'K', 2.01, 4); -- ERR
ERROR:  foreign table "ro_rw_test" does not allow inserts
--Testcase 299:
UPDATE RO_RW_test SET a='L' WHERE i=4; -- ERR
ERROR:  foreign table "ro_rw_test" does not allow updates
--Testcase 300:
DELETE FROM RO_RW_test WHERE i=4; -- ERR
ERROR:  foreign table "ro_rw_test" does not allow deletes
-- force_RO false SERVER true TABLE true
--Testcase 301:
ALTER SERVER sqlite_svr OPTIONS (ADD updatable 'true');
--Testcase 302:
ALTER FOREIGN TABLE RO_RW_test OPTIONS (SET updatable 'true');
--Testcase 303:
INSERT INTO RO_RW_test (i, a, b, c) VALUES (8, 'M', 5.02, 8); -- OK
--Testcase 304:
UPDATE RO_RW_test SET a='N' WHERE i=8; -- OK
--Testcase 305:
DELETE FROM RO_RW_test WHERE i=8; -- OK
--Testcase 306:
INSERT INTO RO_RW_test (i, a, b, c) VALUES (9, 'O', 3.21, 9); -- OK
-- force_RO false SERVER false TABLE true
--Testcase 307
ALTER SERVER sqlite_svr OPTIONS (SET updatable 'false');
--Testcase 308
INSERT INTO RO_RW_test (i, a, b, c) VALUES (10, 'P', 4.15, 1); -- OK
--Testcase 309:
UPDATE RO_RW_test SET a='Q' WHERE i=9; -- OK
--Testcase 310:
DELETE FROM RO_RW_test WHERE i=9; -- OK
-- force_RO false SERVER false TABLE false
--Testcase 311:
ALTER FOREIGN TABLE RO_RW_test OPTIONS (SET updatable 'false');
--Testcase 312:
INSERT INTO RO_RW_test (i, a, b, c) VALUES (11, 'Q', 2.27, 5); -- ERR
ERROR:  foreign table "ro_rw_test" does not allow inserts
--Testcase 313:
UPDATE RO_RW_test SET a='S' WHERE i=9; -- ERR
ERROR:  foreign table "ro_rw_test" does not allow updates
--Testcase 314:
DELETE FROM RO_RW_test WHERE i=9; -- ERR
ERROR:  foreign table "ro_rw_test" does not allow deletes
-- force_RO false SERVER true TABLE false
--Testcase 315:
ALTER SERVER sqlite_svr OPTIONS (SET updatable 'true');
--Testcase 316:
INSERT INTO RO_RW_test (i, a, b, c) VALUES (12, 'R', 6.18, 11); -- ERR
ERROR:  foreign table "ro_rw_test" does not allow inserts
--Testcase 317:
UPDATE RO_RW_test SET a='T' WHERE i=9; -- ERR
ERROR:  foreign table "ro_rw_test" does not allow updates
--Testcase 318:
DELETE FROM RO_RW_test WHERE i=9; -- ERR
ERROR:  foreign table "ro_rw_test" does not allow deletes
--Testcase 319:
ALTER SERVER sqlite_svr OPTIONS (DROP updatable);
--Testcase 320:
ALTER FOREIGN TABLE RO_RW_test OPTIONS (DROP updatable);
--Testcase 321:
SELECT * FROM RO_RW_test ORDER BY i;
 i  | a |   b   | c 
----+---+-------+---
  4 | F | 0.005 | 5
 10 | P |  4.15 | 1
(2 rows)

--Testcase 322:
DELETE FROM RO_RW_test;
--Testcase 323
ALTER SERVER sqlite_svr OPTIONS (SET force_readonly 'true');
-- force_RO true SERVER default TABLE default
--Testcase 324:
SELECT * FROM sqlite_fdw_db_list('sqlite_svr');
 sqlite_id | alias |              file              | readonly | txn  
-----------+-------+--------------------------------+----------+------
         0 | main  | /tmp/sqlite_fdw_test/common.db | t        | none
(1 row)

--Testcase 325:
INSERT INTO RO_RW_test (i, a, b, c) VALUES (2, 'B', 3.01, 1); -- ERR
ERROR:  foreign table "ro_rw_test" does not allow inserts
--Testcase 326:
UPDATE RO_RW_test SET a='C' WHERE i=2; -- ERR
ERROR:  foreign table "ro_rw_test" does not allow updates
--Testcase 327:
DELETE FROM RO_RW_test WHERE i=2; -- ERR
ERROR:  foreign table "ro_rw_test" does not allow deletes
-- force_RO true SERVER true TABLE default
--Testcase 328:
ALTER SERVER sqlite_svr OPTIONS (ADD updatable 'true');
--Testcase 329:
INSERT INTO RO_RW_test (i, a, b, c) VALUES (3, 'D', 5.02, 8); -- ERR
ERROR:  foreign table "ro_rw_test" does not allow inserts
--Testcase 330:
UPDATE RO_RW_test SET a='E' WHERE i=3; -- ERR
ERROR:  foreign table "ro_rw_test" does not allow updates
--Testcase 331:
DELETE FROM RO_RW_test WHERE i=3; -- ERR
ERROR:  foreign table "ro_rw_test" does not allow deletes
--Testcase 332:
INSERT INTO RO_RW_test (i, a, b, c) VALUES (4, 'F', 0.005, 5); -- ERR
ERROR:  foreign table "ro_rw_test" does not allow inserts
-- force_RO true SERVER false TABLE default
--Testcase 333:
ALTER SERVER sqlite_svr OPTIONS (SET updatable 'false');
--Testcase 334:
INSERT INTO RO_RW_test (i, a, b, c) VALUES (5, 'H', 0.03, 7); -- ERR
ERROR:  foreign table "ro_rw_test" does not allow inserts
--Testcase 335:
UPDATE RO_RW_test SET a='E' WHERE i=4; -- ERR
ERROR:  foreign table "ro_rw_test" does not allow updates
--Testcase 336:
DELETE FROM RO_RW_test WHERE i=4; -- ERR
ERROR:  foreign table "ro_rw_test" does not allow deletes
-- force_RO true SERVER default TABLE true
--Testcase 337:
ALTER SERVER sqlite_svr OPTIONS (DROP updatable);
--Testcase 338:
ALTER FOREIGN TABLE RO_RW_test OPTIONS (ADD updatable 'true');
--Testcase 339:
INSERT INTO RO_RW_test (i, a, b, c) VALUES (6, 'I', 1.403, 2); -- ERR
ERROR:  foreign table "ro_rw_test" does not allow inserts
--Testcase 340:
UPDATE RO_RW_test SET a='J' WHERE i=6; -- ERR
ERROR:  foreign table "ro_rw_test" does not allow updates
--Testcase 341:
DELETE FROM RO_RW_test WHERE i=6; -- ERR
ERROR:  foreign table "ro_rw_test" does not allow deletes
-- force_RO true SERVER default TABLE false
--Testcase 342:
ALTER FOREIGN TABLE RO_RW_test OPTIONS (SET updatable 'false');
--Testcase 343:
INSERT INTO RO_RW_test (i, a, b, c) VALUES (7, 'K', 2.01, 4); -- ERR
ERROR:  foreign table "ro_rw_test" does not allow inserts
--Testcase 344:
UPDATE RO_RW_test SET a='L' WHERE i=4; -- ERR
ERROR:  foreign table "ro_rw_test" does not allow updates
--Testcase 345:
DELETE FROM RO_RW_test WHERE i=4; -- ERR
ERROR:  foreign table "ro_rw_test" does not allow deletes
-- force_RO true SERVER true TABLE true
--Testcase 346:
ALTER SERVER sqlite_svr OPTIONS (ADD updatable 'true'); -- ERR
--Testcase 347:
ALTER FOREIGN TABLE RO_RW_test OPTIONS (SET updatable 'true'); -- ERR
--Testcase 348:
INSERT INTO RO_RW_test (i, a, b, c) VALUES (8, 'M', 5.02, 8); -- ERR
ERROR:  foreign table "ro_rw_test" does not allow inserts
--Testcase 349:
UPDATE RO_RW_test SET a='N' WHERE i=8; -- OK
ERROR:  foreign table "ro_rw_test" does not allow updates
--Testcase 350:
DELETE FROM RO_RW_test WHERE i=8; -- OK
ERROR:  foreign table "ro_rw_test" does not allow deletes
--Testcase 351:
INSERT INTO RO_RW_test (i, a, b, c) VALUES (9, 'O', 3.21, 9); -- ERR
ERROR:  foreign table "ro_rw_test" does not allow inserts
-- force_RO true SERVER false TABLE true
--Testcase 352:
ALTER SERVER sqlite_svr OPTIONS (SET updatable 'false');
--Testcase 353:
INSERT INTO RO_RW_test (i, a, b, c) VALUES (10, 'P', 4.15, 1); -- ERR
ERROR:  foreign table "ro_rw_test" does not allow inserts
--Testcase 354:
UPDATE RO_RW_test SET a='Q' WHERE i=9; -- ERR
ERROR:  foreign table "ro_rw_test" does not allow updates
--Testcase 355:
DELETE FROM RO_RW_test WHERE i=9; -- ERR
ERROR:  foreign table "ro_rw_test" does not allow deletes
-- force_RO true SERVER false TABLE false
--Testcase 356:
ALTER FOREIGN TABLE RO_RW_test OPTIONS (SET updatable 'false');
--Testcase 357:
INSERT INTO RO_RW_test (i, a, b, c) VALUES (11, 'Q', 2.27, 5); -- ERR
ERROR:  foreign table "ro_rw_test" does not allow inserts
--Testcase 358:
UPDATE RO_RW_test SET a='S' WHERE i=9; -- ERR
ERROR:  foreign table "ro_rw_test" does not allow updates
--Testcase 359:
DELETE FROM RO_RW_test WHERE i=9; -- ERR
ERROR:  foreign table "ro_rw_test" does not allow deletes
-- force_RO true SERVER true TABLE false
--Testcase 360:
ALTER SERVER sqlite_svr OPTIONS (SET updatable 'true');
--Testcase 361:
INSERT INTO RO_RW_test (i, a, b, c) VALUES (12, 'R', 6.18, 11); -- ERR
ERROR:  foreign table "ro_rw_test" does not allow inserts
--Testcase 362:
UPDATE RO_RW_test SET a='T' WHERE i=9; -- ERR
ERROR:  foreign table "ro_rw_test" does not allow updates
--Testcase 363:
DELETE FROM RO_RW_test WHERE i=9; -- ERR
ERROR:  foreign table "ro_rw_test" does not allow deletes
--Testcase 364:
ALTER SERVER sqlite_svr OPTIONS (DROP updatable);
--Testcase 365:
ALTER FOREIGN TABLE RO_RW_test OPTIONS (DROP updatable);
--Testcase 366:
ALTER SERVER sqlite_svr OPTIONS (DROP force_readonly);
--Testcase 367:
SELECT * FROM sqlite_fdw_db_list('sqlite_svr');
 sqlite_id | alias |              file              | readonly | txn  
-----------+-------+--------------------------------+----------+------
         0 | main  | /tmp/sqlite_fdw_test/common.db | f        | none
(1 row)

--Testcase 368:
SELECT * FROM RO_RW_test ORDER BY i;
 i | a | b | c 
---+---+---+---
(0 rows)

--Testcase 369:
DROP FOREIGN TABLE RO_RW_test;
-- End of RO/RW test
--Bind error message test for some unsupported data type
--Testcase 370:
ALTER FOREIGN TABLE numbers ALTER COLUMN b TYPE tsquery;
--Testcase 371:
INSERT INTO numbers VALUES(8,'fat & (rat | cat)');
ERROR:  cannot convert constant value to Sqlite value
HINT:  Constant value data type: "tsquery" in column "b"
--Testcase 372:
ALTER FOREIGN TABLE numbers ALTER COLUMN b TYPE varchar(255);
--Testcase 373:
SELECT sqlite_fdw_db_encoding('sqlite_svr');
 sqlite_fdw_db_encoding 
------------------------
 UTF-8
(1 row)

--Testcase 374:
SELECT sqlite_fdw_db_journal_mode('sqlite_svr') jm;
   jm   
--------
 delete
(1 row)

--Testcase 375:
SELECT sqlite_fdw_db_secure_delete('sqlite_svr') sd;
 sd 
----
  1
(1 row)

--Testcase 376:
SELECT sqlite_fdw_db_page_size('sqlite_svr') ps_b;
 ps_b 
------
 4096
(1 row)

--Testcase 377:
SELECT sqlite_fdw_db_exclusive_locking_mode('sqlite_svr') elm;
 elm 
-----
 f
(1 row)

--Testcase 378:
SELECT sqlite_fdw_db_auto_vacuum('sqlite_svr') av;
  av  
------
 none
(1 row)

--Testcase 379:
SELECT sqlite_fdw_db_temp_store('sqlite_svr') tsm;
   tsm   
---------
 default
(1 row)

--Testcase 380:
SELECT sqlite_fdw_db_synchronous_mode('sqlite_svr') sm;
   sm   
--------
 normal
(1 row)

--Testcase 381:
SELECT * FROM sqlite_fdw_table_info('sqlite_svr', 'type_UUID+');
 sqlite_id | column | type | notnull | default_value | pk | column_mode 
-----------+--------+------+---------+---------------+----+-------------
         0 | i      | INT  | f       |               | f  | normal
         1 | u      | uuid | f       |               | f  | normal
         2 | t      |      | f       |               | f  | normal
         3 | l      |      | f       |               | f  | normal
(4 rows)

--Testcase 382:
SELECT * FROM sqlite_fdw_table_info('sqlite_svr', 'type_UUID');
 sqlite_id | column | type | notnull | default_value | pk | column_mode 
-----------+--------+------+---------+---------------+----+-------------
         0 | i      | INT  | f       |               | f  | normal
         1 | u      | uuid | f       |               | f  | normal
(2 rows)

--Testcase 383:
SELECT * FROM sqlite_fdw_table_info('sqlite_svr', 'BitT');
 sqlite_id | column |      type      | notnull | default_value | pk | column_mode 
-----------+--------+----------------+---------+---------------+----+-------------
         0 | p      | INTEGER        | f       |               | t  | normal
         1 | a      | BIT(3)         | f       |               | f  | normal
         2 | b      | BIT VARYING(5) | f       |               | f  | normal
(3 rows)

--Testcase 384:
SELECT * FROM sqlite_fdw_table_info('sqlite_svr', 'strict');
 sqlite_id | column | type | notnull | default_value | pk | column_mode 
-----------+--------+------+---------+---------------+----+-------------
         0 | i      | INT  | t       |               | t  | normal
         1 | t      | TEXT | f       |               | f  | normal
         2 | b      | REAL | t       |               | f  | normal
         3 | c      | BLOB | f       | X'ADCD'       | f  | normal
         4 | a      | ANY  | f       | 12            | f  | normal
(5 rows)

--Testcase 385:
SELECT * FROM sqlite_fdw_table_info('sqlite_svr', 'norowid');
 sqlite_id | column | type | notnull | default_value | pk | column_mode 
-----------+--------+------+---------+---------------+----+-------------
         0 | k      | TEXT | t       |               | t  | normal
         1 | t      | TEXT | f       |               | f  | normal
         2 | b      | REAL | t       |               | f  | normal
         3 | c      | BLOB | f       | X'ADCD'       | f  | normal
(4 rows)

--Testcase 386:
SELECT * FROM sqlite_fdw_rel_list('sqlite_svr');
 schema |       table       |  type   | ncol | no_rowid | strict 
--------+-------------------+---------+------+----------+--------
 main   | sqlite_stat1      | table   |    3 | f        | f
 main   | fk_s_artist       | table   |    2 | f        | f
 main   | type_BOOLEAN_oper | table   |    5 | f        | f
 main   | Unicode data      | table   |    2 | f        | f
 main   | RO_RW_test        | table   |    4 | f        | f
 main   | fts_table_config  | shadow  |    2 | t        | f
 main   | fts_table_idx     | shadow  |    3 | t        | f
 main   | fts_table_data    | shadow  |    2 | f        | f
 main   | A a               | table   |    1 | f        | f
 main   | shorty            | table   |    2 | f        | f
 main   | noprimary         | table   |    2 | f        | f
 main   | columntest        | table   |    3 | f        | f
 main   | fts_table_docsize | shadow  |    2 | f        | f
 main   | fts_table         | virtual |    4 | f        | f
 main   | t                 | table   |    2 | f        | f
 main   | department        | table   |    2 | f        | f
 main   | type_BIT          | table   |    2 | f        | f
 main   | type_TIME         | table   |    1 | f        | f
 main   | employee          | table   |    3 | f        | f
 main   | type_BOOLEANpk    | table   |    1 | f        | f
 main   | grem1_1           | table   |    2 | f        | f
 main   | fk_d_track        | table   |    3 | f        | f
 main   | type_UUID         | table   |    2 | f        | f
 main   | case_exp          | table   |    3 | f        | f
 main   | type_BLOB         | table   |    1 | f        | f
 main   | sqlite_schema     | table   |    5 | f        | f
 main   | strict            | table   |    5 | f        | t
 main   | type_VARBIT       | table   |    2 | f        | f
 main   | limittest         | table   |    3 | f        | f
 main   | type_SINT         | table   |    1 | f        | f
 main   | grem1_2           | table   |    4 | f        | f
 main   | norowid           | table   |    4 | t        | f
 main   | typetest          | table   |    6 | f        | f
 main   | type_TEXT         | table   |    1 | f        | f
 main   | type_STRING       | table   |    1 | f        | f
 main   | type_VARBIT+      | view    |    4 | f        | f
 main   | type_BOOLEAN      | table   |    2 | f        | f
 main   | empdata           | table   |    2 | f        | f
 main   | type_DOUBLE       | table   |    1 | f        | f
 main   | numbers           | table   |    2 | f        | f
 main   | type_BOOLEAN+     | view    |    4 | f        | f
 main   | fts_table_content | shadow  |    3 | f        | f
 main   | grem1_3           | table   |    4 | f        | f
 main   | type_BINT         | table   |    1 | f        | f
 main   | type_INTEGER      | table   |    1 | f        | f
 main   | type_FLOAT        | table   |    1 | f        | f
 main   | multiprimary      | table   |    3 | f        | f
 main   | notype            | table   |    1 | f        | f
 main   | type_DATE         | table   |    1 | f        | f
 main   | type_UUIDpk       | table   |    1 | f        | f
 main   | BitT              | table   |    3 | f        | f
 main   | type_BYTE         | table   |    1 | f        | f
 main   | type_TIMESTAMP    | table   |    2 | f        | f
 main   | type_BIT+         | view    |    4 | f        | f
 main   | type_UUID+        | view    |    4 | f        | f
 main   | alltypetest       | table   |   24 | f        | f
(56 rows)

--Testcase 387:
SELECT * FROM sqlite_fdw_index_list('sqlite_svr', 'Unicode data');
 sqlite_id |           index_name            | unique | source | partial 
-----------+---------------------------------+--------+--------+---------
         0 | sqlite_autoindex_Unicode data_1 | t      | pk     | f
(1 row)

--Testcase 388:
SELECT * FROM sqlite_fdw_table_info('sqlite_svr', 'fts_table');
 sqlite_id |   column    | type | notnull | default_value | pk | column_mode 
-----------+-------------+------+---------+---------------+----+-------------
         0 | name        |      | f       |               | f  | normal
         1 | description |      | f       |               | f  | normal
         2 | fts_table   |      | f       |               | f  | hidden+vtbl
         3 | rank        |      | f       |               | f  | hidden+vtbl
(4 rows)

--Testcase 389:
SELECT * FROM sqlite_fdw_table_info('sqlite_svr', 'grem1_1');
 sqlite_id | column | type | notnull | default_value | pk | column_mode 
-----------+--------+------+---------+---------------+----+-------------
         0 | a      | INT  | f       |               | t  | normal
         1 | b      | INT  | f       |               | f  | gen stored
(2 rows)

--Testcase 390:
SELECT * FROM sqlite_fdw_table_info('sqlite_svr', 'grem1_2');
 sqlite_id | column | type | notnull | default_value | pk | column_mode 
-----------+--------+------+---------+---------------+----+-------------
         0 | a      | INT  | f       |               | t  | normal
         1 | b      | INT  | f       |               | f  | gen stored
         2 | c      | INT  | f       |               | f  | gen stored
         3 | d      | INT  | f       |               | f  | gen stored
(4 rows)

--Testcase 391:
SELECT * FROM sqlite_fdw_table_info('sqlite_svr', 'grem1_3');
 sqlite_id | column | type | notnull | default_value | pk | column_mode 
-----------+--------+------+---------+---------------+----+-------------
         0 | e      | INT  | f       |               | t  | normal
         1 | f      | INT  | f       |               | f  | gen dynamic
         2 | g      | INT  | f       |               | f  | gen stored
         3 | h      | INT  | f       |               | f  | gen dynamic
(4 rows)

--Testcase 142:
DROP FUNCTION test_param_WHERE();
--Testcase 143:
DROP FOREIGN TABLE numbers;
--Testcase 144:
DROP FOREIGN TABLE department;
--Testcase 145:
DROP FOREIGN TABLE employee;
--Testcase 146:
DROP FOREIGN TABLE empdata;
--Testcase 147:
DROP FOREIGN TABLE multiprimary;
--Testcase 148:
DROP FOREIGN TABLE multiprimary2;
--Testcase 149:
DROP FOREIGN TABLE columntest;
--Testcase 150:
DROP FOREIGN TABLE noprimary;
--Testcase 161:
DROP FOREIGN TABLE fts_table;
--Testcase 222:
DROP FOREIGN TABLE grem1_1;
--Testcase 223:
DROP FOREIGN TABLE grem1_2;
--Testcase 235:
DROP FOREIGN TABLE case_exp;
--Testcase 151:
DROP SERVER sqlite_svr;
--Testcase 152:
DROP EXTENSION sqlite_fdw CASCADE;
